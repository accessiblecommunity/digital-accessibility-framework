---
import * as dbquery from '../../script/dbquery.js';
import Layout from '../../layouts/Layout.astro';
import {baseUri, idFrag} from '../../script/util.js';

function statementsSparql(not) {return "select distinct ?id ?label ?stmt where { ?id a a11y:AccessibilityStatement filter " + not + " exists { ?id a11y:references ?ref . ?ref a11y:refType ?reftype . ?reftype rdfs:label 'guidelines'@en } . ?id rdfs:label ?label ; a11y:stmtGuidance ?stmt } order by ?label";};

const statementsResult = await dbquery.selectQuery(statementsSparql(""));
const noGlResult = await dbquery.selectQuery(statementsSparql("not"));
---

<Layout title="Guidance statements">
<p><a href="#guideline-derived-statements">Guideline-derived statements</a> | <a href="#matrix-derived-statements">Matrix-derived statements</a></p>
<section id="guideline-derived-statements">
<h2>Guideline-derived statements</h2>
<p>The following guidance statements refer to content from established guidelines:</p> 
<ul>
{statementsResult.results.bindings.map((statement) => <li><a href={baseUri + 'guidance-statements/' + idFrag(statement.id.value)}>{statement.label.value}</a> - {statement.stmt.value}</li>)}
</ul>
</section>
<section id="matrix-derived-statements">
<h2>Matrix-derived statements</h2>
<p>The following guidance statements were created while seeking to fill guidelines gaps using the top-down nature of the matrix:</p>
<ul>
{noGlResult.results.bindings.map((statement) => <li><a href={baseUri + 'guidance-statements/' + idFrag(statement.id.value)}>{statement.label.value}</a> - {statement.stmt.value}</li>)}
</ul>
</sec
</Layout>

