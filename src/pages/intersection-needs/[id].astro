---
import * as dbquery from '../../script/dbquery.js';
import Layout from '../../layouts/Layout.astro';
import {baseUri, idFrag} from '../../script/util.js';

export async function getStaticPaths() { 
	const module = await import('./ids.js');
	const {ids} = module;
	return (ids);
}

const {id} = Astro.params;

const labelSparql = "select ?id ?label where { values ?id {:" + id + "} . ?id rdfs:label ?label }";
const labelResult = await dbquery.selectQuery(labelSparql);

const statementsSparql = "select distinct ?id ?label where { values ?itemId {:" + id + "} . ?id a11y:supports/a11y:supports ?itemId ; rdfs:label ?label }";
const statementsResult = await dbquery.selectQuery(statementsSparql);

const supSparql = "select ?id ?fn1 ?fn1Label ?fn2 ?fn2Label where { values ?id {:" + id + "} . ?id a11y:supports ?fn1 ; a11y:supports ?fn2 . filter (!sameterm(?fn1, ?fn2)) . ?fn1 rdfs:label ?fn1Label . ?fn2 rdfs:label ?fn2Label } limit 1";
const supResult = await dbquery.selectQuery(supSparql);
---
<Layout title={"Intersection need: " + labelResult.results.bindings[0].label.value}>
<p>This is an intersection of the functional needs <a href={baseUri + "functional-needs/" + idFrag(supResult.results.bindings[0].fn1.value)}>{supResult.results.bindings[0].fn1Label.value}</a> and <a href={baseUri + "functional-needs/" + idFrag(supResult.results.bindings[0].fn2.value)}>{supResult.results.bindings[0].fn2Label.value}</a>.</p>
<p>There are {statementsResult.results.bindings.length} guidance statements that support this intersection need:</p>
<ul>
{statementsResult.results.bindings.map((statement) => <li><a href={baseUri + 'guidance-statements/' + idFrag(statement.id.value)}>{statement.label.value}</a></li>)}
</ul>
</Layout>
